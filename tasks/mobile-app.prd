# Expanse Marketing Native Kiosk App (Expo v53, React 19)

### TL;DR

A native offline survey kiosk app that integrates with the existing Expanse Marketing monorepo, enabling field staff to collect survey responses reliably in environments without internet connectivity. Built with Expo v53 and React 19, the app features an Event Selection → Survey → Repeat loop, with full integration to existing Firebase Functions and APIs. The design leverages existing admin patterns while focusing on offline reliability, multi-brand support (Ford/Lincoln/Other), and secure syncing of completed surveys with their associated event metadata.

---

## Goals

### Business Goals

* Achieve 99%+ successful offline survey collection in field deployments.

* Minimize data loss and ensure all completed surveys are synced when connectivity is restored.

* Reduce support overhead by providing a robust, self-resetting kiosk experience.

* Enable rapid deployment and easy maintenance across multiple locations.

### User Goals

* Allow field staff to conduct surveys without worrying about connectivity.

* Ensure each survey session starts fresh, protecting respondent privacy.

* Provide clear feedback on survey completion and sync status.

* Minimize user errors and confusion with a simple, repeatable workflow.

### Non-Goals

* Integration with IT/MDM (Mobile Device Management) systems.

* Partial or draft survey storage between sessions.

* Advanced analytics or reporting within the kiosk app.

---

## User Stories

**Persona: Field Staff (e.g., Community Health Worker, Event Volunteer)**

* As a field staff member, I want to start a new survey with one tap, so that I can quickly engage the next respondent.

* As a field staff member, I want the app to work without internet, so that I can collect data in remote areas.

* As a field staff member, I want the survey to reset after each completion, so that no previous data is visible to the next respondent.

* As a field staff member, I want to know when my completed surveys have been synced, so that I can trust the data is safe.

* As a field staff member, I want the app to be simple and require minimal training, so that I can focus on my work.

---

## Functional Requirements

* **Event Selection and Survey Loop (Priority: High)**

  * **Event List Home Screen:** Displays current events with filtering (Current/Past/Future) similar to admin interface, allowing field staff to select active events for survey collection.

  * **Event Details:** Shows event metadata including brand (Ford/Lincoln/Other), date range, and survey configuration before launching survey.

  * **Survey Execution (WebView):** Loads the complete survey using SurveyJS in a WebView with full offline functionality, supporting Ford Design System themes and custom renderers.

  * **Survey Reset:** Automatically returns to Event List after survey completion, clearing respondent data while maintaining event context.

* **Offline Data Handling with Monorepo Integration (Priority: High)**

  * **Event Metadata Caching:** Downloads and caches event configurations (ExpanseEvent objects) including survey JSON, themes, brand settings, and API endpoints for offline use.

  * **Survey + Event Data Queuing:** Stores completed surveys with their associated event metadata securely on the device until sync is possible. Each survey includes device_survey_guid, event context, and brand-specific data.

  * **Multi-API Sync Strategy:** Automatically syncs completed surveys to all required endpoints when connectivity is detected:
    - Firebase Firestore (via existing SAVE_SURVEY endpoint)
    - Ford API (for Ford events via SURVEY_UPLOAD_V11 + VEHICLES_INSERT)
    - Lincoln API (for Lincoln events via LINCOLN_SURVEY_UPLOAD + LINCOLN_VEHICLES_INTERESTED + LINCOLN_VEHICLES_DRIVEN)
    - Uses same API endpoints and data mapping as web app Survey.tsx

* **Status & Feedback (Priority: Medium)**

  * **Sync Indicator:** Visual feedback on sync status (e.g., "All surveys synced" or "3 surveys pending sync").

  * **Error Handling:** Clear error messages for failed syncs or corrupted data.

* **Security & Privacy (Priority: Medium)**

  * **No Data Persistence Between Surveys:** Ensures no respondent data is visible after survey completion.

  * **Data Encryption:** Encrypts stored survey data at rest.

---

## User Experience

**Entry Point & First-Time User Experience**

* User launches the app on a dedicated tablet or device.

* The Event List screen appears, showing available events filtered by date (Current Events by default).

* Events display with clear branding (Ford/Lincoln/Other), date ranges, and quick status indicators.

* No onboarding or tutorial is required; the interface follows familiar admin patterns.

**Core Experience**

* **Step 1:** User selects an active event from the Event List.

  * Events are filtered by Current/Past/Future similar to admin interface.

  * Each event shows brand, date range, sync status, and survey count.

  * User taps on an event to view details and launch survey collection.

* **Step 2:** User initiates survey for selected event.

  * The app transitions to the Survey screen, loading the event's survey configuration in a WebView.

  * Full Ford Design System theming applied based on event brand (Ford/Lincoln/Other).

  * Survey is fully interactive and works offline with image upload, file handling, and custom renderers.

* **Step 3:** User completes the survey.

  * Upon submission, the app stores the completed survey with event metadata locally.

  * Multi-API sync queued for when connectivity returns (Firestore + Ford/Lincoln APIs as applicable).

  * The app automatically returns to the Event List, ready for the next respondent.

  * All previous survey respondent data is cleared while event context is maintained.

* **Step 4:** Syncing occurs in the background.

  * If the device is online, completed surveys are uploaded to all required endpoints.

  * The sync status indicator updates to reflect pending/synced surveys per event.

  * Failed syncs are retried with exponential backoff.

**Advanced Features & Edge Cases**

* If the device loses power or crashes, unsynced completed surveys remain stored and are synced when the app restarts and connectivity is available.

* If a survey is abandoned mid-way, no data is stored or synced.

* If sync fails, the user is notified via the status indicator, but can continue collecting new surveys.

**UI/UX Highlights**

* Large, touch-friendly buttons for easy use in the field.

* High-contrast color scheme for visibility in various lighting conditions.

* Minimal text and clear icons to reduce cognitive load.

* Responsive layout for tablets and large phones.

* Accessibility features: screen reader support, sufficient color contrast, and large tap targets.

---

## Narrative

At a busy Ford dealership event, Maria, a field staff member, is tasked with collecting customer feedback and vehicle interest data. She approaches the kiosk tablet, which displays the Event List showing today's active events including "Ford Dealership Experience - Q1 2025" and "Lincoln VIP Preview Event." The Ford event shows a blue Ford-branded interface while the Lincoln event displays elegant Lincoln theming.

Maria taps on the Ford event, and the app loads the complete Ford-branded survey with the Ford Design System theme, custom vehicle selection components, and integrated consent forms. She hands the tablet to a customer, who completes the survey including selecting vehicles of interest, uploading their driver's license photo, and providing feedback. Upon submission, the app stores the response locally with all Ford API metadata and immediately returns to the Event List, ready for the next participant with no trace of previous responses.

Throughout the day, Maria seamlessly switches between Ford and Lincoln events as different customer types approach. She notices sync indicators showing pending surveys for each event but continues her work without interruption. Later, when the device reconnects to the internet, the app automatically uploads Ford surveys to both Firestore and Ford's API endpoints, while Lincoln surveys go to Firestore and Lincoln's separate API system. The organizers receive complete, properly formatted data in all required systems. The kiosk app's integration with existing infrastructure and multi-brand support allows Maria to focus on customer engagement while ensuring data flows correctly to all downstream systems.

---

## Success Metrics

### User-Centric Metrics

* Number of surveys completed per device per day

* User-reported satisfaction (via post-event feedback)

* Average time to complete a survey

### Business Metrics

* Total number of surveys collected and synced

* Reduction in manual data entry or paper-based errors

* Decrease in support tickets related to survey collection

### Technical Metrics

* Sync success/failure rate

* App crash rate

* Data loss incidents (should be zero)

### Tracking Plan

* App launch events

* "Start Survey" button taps

* Survey completion events

* Sync success/failure events

* Error and crash logs

---

## Technical Considerations

### Technical Needs

* **Front-End:** Expo v53, React 19 for cross-platform mobile development integrated as `packages/native-app` in the monorepo.

* **Survey Rendering:** SurveyJS embedded in a WebView with Ford Design System integration and custom renderers matching web app.

* **Offline Storage:** SQLite for structured storage of ExpanseEvent configurations and survey responses with encrypted sensitive data.

* **Sync Logic:** Background process to upload completed surveys to multiple endpoints when online (Firestore + Ford/Lincoln APIs).

* **Shared Dependencies:** Reuse existing monorepo packages where possible (types, utilities, API configurations).

* **Data Model Consolidation:** Extract and formalize survey response data models from existing Survey.tsx mapping functions into shared TypeScript interfaces for consistent API payloads across web and mobile apps.

### Integration Points

* **Firebase Functions:** Use existing `checkSurveyLimit` and `validateSurveyLimit` functions for survey validation.

* **API Endpoints:** Same endpoints as web app:
  - `GET_SURVEY` for event configuration
  - `SAVE_SURVEY` for Firestore storage  
  - `SURVEY_UPLOAD_V11` and `VEHICLES_INSERT` for Ford API
  - `LINCOLN_SURVEY_UPLOAD`, `LINCOLN_VEHICLES_INTERESTED`, `LINCOLN_VEHICLES_DRIVEN` for Lincoln API

* **Event Data Model:** Full `ExpanseEvent` interface with brand, theme, survey configuration, and API routing logic.

* **Survey Response Data Models:** Define comprehensive TypeScript interfaces for brand-specific survey responses:
  - `FordSurveyAnswers` interface for Ford API payload structure
  - `LincolnSurveyAnswers` interface for Lincoln API payload structure  
  - `BaseSurveyAnswers` interface for common Firestore fields
  - Vehicle of Interest (VOI) and Vehicle Driven data models for both brands

* **Ford Design System:** Integrate FDS theming system for Ford/Lincoln branded surveys to match web app experience.

### Data Storage & Privacy

* All completed surveys stored locally with associated ExpanseEvent metadata in encrypted SQLite database until synced.

* Event configurations cached locally for offline operation, refreshed when online.

* No partial or incomplete survey data is stored to prevent data corruption.

* No respondent data persists between sessions, but event selection context is maintained.

* Compliance with relevant data privacy standards (GDPR, CCPA) following existing monorepo patterns.

### Scalability & Performance

* Designed for single-device, high-frequency use (e.g., 100+ surveys/day).

* Minimal memory and CPU usage to ensure stability on low-cost tablets.

### Potential Challenges

* **WebView SurveyJS Integration:** Ensuring Ford Design System themes and custom renderers work correctly in mobile WebView across devices.

* **Multi-API Sync Complexity:** Handling failures when surveys must be saved to 2-3 different API endpoints (Firestore + brand APIs).

* **Event Configuration Updates:** Managing cache invalidation when event configurations change in admin while app is offline.

* **Monorepo Dependencies:** Managing shared code between web and native apps (types, utilities, API configs) without introducing circular dependencies.

* **Data Model Consistency:** Ensuring Ford and Lincoln API payload structures remain consistent between web app's dynamic mapping and mobile app's structured interfaces while maintaining backward compatibility.

* **Expo + WebView + SurveyJS:** Ensuring compatibility between Expo v53, React 19, and complex SurveyJS setups with file uploads and custom components.

---

## Milestones & Sequencing

### Project Estimate

* **Small:** 1–2 weeks for MVP (core kiosk loop, offline storage, basic sync)

* **Medium:** 2–4 weeks for full polish (error handling, UI/UX refinements, security)

### Team Size & Composition

* **Small Team:** 2 people

  * 1 Full-Stack Engineer (React Native/Expo, backend API)

  * 1 Product/Designer (Figma wireframes, user testing, QA)

### Suggested Phases

**Phase 1: Core Integration & Event Management (1 week)**

* Key Deliverables: Event List screen, ExpanseEvent integration, basic survey WebView, monorepo structure setup, data model extraction and formalization.

* Responsible: Full-Stack Engineer.

* Dependencies: Access to existing Firebase Functions, admin interface patterns, monorepo structure, analysis of current Survey.tsx mapping logic.

**Phase 2: Multi-API Sync & Brand Integration (1 week)**

* Key Deliverables: Multi-endpoint sync logic, Ford Design System integration, brand-specific API routing, offline SQLite storage.

* Responsible: Full-Stack Engineer.

* Dependencies: API credentials, Ford Design System access, brand mapping logic from web app.

**Phase 3: Testing & UX Refinement (0.5 week)**

* Key Deliverables: Field testing with multiple brands, UI/UX tweaks, accessibility improvements, sync reliability testing.

* Responsible: Product/Designer, Engineer.

* Dependencies: Test devices, real event data, network simulation tools.

**Phase 4: Security & Production Readiness (0.5 week)**

* Key Deliverables: Data encryption, error states, crash recovery, production deployment pipeline.

* Responsible: Engineer.

* Dependencies: Security review, production Firebase access.

---